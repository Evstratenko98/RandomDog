{"version":3,"sources":["components/PictureDog.js","App.js","redux/actions.js","redux/types.js","serviceWorker.js","redux/mainReducer.js","redux/rootReducer.js","redux/sagas.js","index.js"],"names":["PictureDog","url","src","alt","className","App","dispatch","useDispatch","picture","useSelector","state","main","message","onClick","type","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","payload","sagaWatcher","sagaWorker","takeEvery","fetchPicture","a","fetch","response","json","call","put","console","log","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","run","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oNAEA,IAeeA,EAfI,SAAC,GAAW,IAAVC,EAAS,EAATA,IACpB,OAAIA,EAQH,6BACEA,GAAO,yBAAKC,IAAKD,EAAKE,IAAI,IAAIC,UAAU,eAPzC,yBAAKA,UAAU,iBACd,oQCoBWC,MArBf,WACE,IAAMC,EAAWC,cACXC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,QAAQI,WAExD,OACE,yBAAKR,UAAU,cACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,cAAb,gBACA,yBAAKA,UAAY,qBACf,kBAAC,EAAD,CAAYH,IAAKO,KAEnB,4BACEJ,UAAY,gBACZS,QAAW,kBAAMP,ECfnB,CACNQ,KCH6B,sBFevB,8GGJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCChBAC,EAAe,CACpBZ,QAAS,ICAGa,EAAcC,YAAgB,CAC1CX,KDE0B,WAAmC,IAAlCD,EAAiC,uDAAzBU,EAAcG,EAAW,uCAC5D,OAAQA,EAAOT,MACd,IFR2B,gBES1B,OAAO,2BACHJ,GADJ,IACWF,QAASe,EAAOC,UAE5B,QAAS,OAAOd,M,2CETDe,G,WAOPC,GAPH,SAAUD,IAAV,iEACN,OADM,SACAE,YJHwB,kBIGGD,GAD3B,uC,SAGQE,I,2EAAf,4BAAAC,EAAA,sEACwBC,MAAM,2CAD9B,cACOC,EADP,gBAEcA,EAASC,OAFvB,oF,sBAIA,SAAUN,IAAV,uEAEkB,OAFlB,kBAEwBO,YAAKL,GAF7B,OAGE,OADMJ,EAFR,gBAGQU,YAAI,CAACpB,KJbgB,gBIaKU,YAHlC,uDAMEW,QAAQC,IAAR,MANF,qDCIA,IAAMC,EAAOC,cAEPC,EAAQC,YAAYnB,EAAaoB,YACtCC,YACCC,IAAON,KAGTA,EAAKO,IAAInB,GAET,IAAMoB,EACL,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,OAGFO,IAASC,OACRF,EACCG,SAASC,eAAe,SJqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAM7C,c","file":"static/js/main.3fdab323.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PictureDog = ({url}) => {\r\n\tif(!url) {\r\n\t\treturn (\r\n\t\t\t<div className=\"empty_picture\">\r\n\t\t\t\t<p>Нажмите на кнопку для загрузки изображения</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{url && <img src={url} alt=\"#\" className=\"image_dog\"/>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PictureDog\r\n","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {fetchPicture} from './redux/actions'\nimport PictureDog from './components/PictureDog'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const picture = useSelector(state => state.main.picture.message)\n\n  return (\n    <div className=\"background\">\n      <div className=\"container\">\n        <p className=\"title_text\">Dogs picture</p>\n        <div className = \"picture_container\">\n          <PictureDog url={picture}/>\n        </div>\n        <button\n          className = \"glow-on-hover\"\n          onClick = {() => dispatch(fetchPicture())}\n        >\n          Загрузить картинку\n        </button>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import {REQUEST_PICTURE} from './types'\r\n\r\nexport function fetchPicture() {\r\n\treturn {\r\n\t\ttype: REQUEST_PICTURE\t\r\n\t}\r\n}","export const FETCH_PICTURE = \"FETCH_PICTURE\"\r\nexport const REQUEST_PICTURE = \"REQUEST_PICTURE\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FETCH_PICTURE} from './types'\r\n\r\nconst initialState = {\r\n\tpicture: '',\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase FETCH_PICTURE: \r\n\t\t\treturn {\r\n\t\t\t\t...state, picture: action.payload,\r\n\t\t\t}\r\n\t\tdefault: return state\r\n\t}\r\n}","import {combineReducers} from 'redux'\r\nimport {mainReducer} from './mainReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n\tmain: mainReducer,\r\n})","import {takeEvery, put, call} from 'redux-saga/effects'\r\nimport {FETCH_PICTURE, REQUEST_PICTURE} from './types'\r\n\r\nexport function* sagaWatcher() {\r\n\tyield takeEvery(REQUEST_PICTURE, sagaWorker)\r\n}\r\nasync function fetchPicture() {\r\n\tconst response = await fetch('https://dog.ceo/api/breeds/image/random')\r\n\treturn await response.json()\r\n}\t\r\nfunction* sagaWorker() {\r\n\ttry {\r\n\t\tconst payload = yield call(fetchPicture)\r\n\t\tyield put({type: FETCH_PICTURE, payload})\r\n\t}\r\n\tcatch(e) {\r\n\t\tconsole.log(e)\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {compose, createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\n\nimport {rootReducer} from './redux/rootReducer'\nimport {sagaWatcher} from './redux/sagas'\n\nconst saga = createSagaMiddleware()\n\nconst store = createStore(rootReducer, compose(\n\tapplyMiddleware(\n\t\tthunk, saga\n\t),\n))\nsaga.run(sagaWatcher)\n\nconst app = (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n)\nReactDOM.render(\n\tapp,\n \tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}